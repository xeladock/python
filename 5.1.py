# Напишите функцию, которая для заданного натурального числа n генерирует последовательность чисел, описанную в гипотезе Коллатца:
#
# Если n четное, то делим его пополам, если нечётное, то умножаем на 3 и прибавляем 1. С итогом вычисления снова проделываем эту операцию до тех пор, пока в результате не будет получено число 1.
#
# Например, для числа n = 17 последовательность вычислений выглядит следующим образом:
# 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1
#
# Предполагается, что подобная последовательность остановится на числе 1 для любого начального натурального числа n.
#
# Формат ввода:
# Строка, содержащая единственное целое число nn, n > 0n>0.
#
# Формат вывода:
# Строка, содержащая последовательность целых чисел, разделённых пробелом.
#
# Sample Input 1:
#
# 17
# Sample Output 1:
#
# 17 52 26 13 40 20 10 5 16 8 4 2 1
# Sample Input 2:
#
# 1
# Sample Output 2:
# 1
#

# https://stepik.org/lesson/21305/step/1?adaptive=true&unit=5105
# а так же напишите функцию которая выводит максимальное число из вывода

def collatz(x):
    s=[]
    s.append(x)
    while x!=1:
        if x%2==0:
            x=x/2
            s.append(int(x))
        else:
            x=x*3+1
            s.append(int(x))
    string = ' '.join(str(e) for e in s)
    return string
a=int(input())
print(collatz(a))

def max_collatz(x):
    s=[int(n) for n in collatz(x).split()]
    mx=max(s)
    return max(s)

print(max_collatz(a))